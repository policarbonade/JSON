{
	"info": {
		"_postman_id": "da02ea2c-ac06-455e-853f-86a4951b4f98",
		"name": "POSTMAN 2.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "20117881"
	},
	"item": [
		{
			"name": "THE  FIRST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first?name=Poll&age=44",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Poll"
						},
						{
							"key": "age",
							"value": "44"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "THE SECOND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"\r",
							"let resp_data = pm.response.json;\r",
							"console.log(resp_data);\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Is name Alexey?\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(\"Alexey\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Is age 30?\"), function () {\r",
							"    pm.expect(pm.response.json().age.to.eql(30));\r",
							"}\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Is salary 4020?\"), function() {\r",
							"    pm.expect(pm.response.json().salary.to.eql(4020));\r",
							"}\r",
							"\r",
							"// Спарсить request\r",
							"\r",
							"let req_data = request.data;\r",
							"console.log(req_data);\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Is name Alexey?\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Is age 30?\", function () {\r",
							"    pm.expect(pm.response.json().age).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Is salary 4020?\", function () {\r",
							"    pm.expect(pm.response.json().salary).to.eql(Number(req_data.salary));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(pm.response.json().family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Does u_salary_1_5_year equal salary?\", function () {\r",
							"    pm.expect(pm.response.json().family.u_salary_1_5_year).to.eql(Number(req_data.salary)*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alexey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "4020",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "THE THIRD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"// Спарсить response body в json.\r",
							"\r",
							"let resp_data = pm.response.json();\r",
							"console.log(resp_data);\r",
							"\r",
							"// Спарсить request\r",
							"\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"console.log(req_data);\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Name equals name from request\", function () {\r",
							"    let nameData = pm.response.json();\r",
							"    pm.expect(nameData.name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Age equals age from request\", function () {\r",
							"    let ageData = pm.response.json();\r",
							"    pm.expect(ageData.age).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary equals salary from request\", function () {\r",
							"    let salaryData = pm.response.json();\r",
							"    pm.expect(salaryData.salary).to.eql(Number(req_data.salary));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"\r",
							"console.log(resp_data.family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name\r",
							"\r",
							"pm.test('Dog has a name', function() {\r",
							"  pm.expect(resp_data.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"\r",
							"pm.test('Dog has an age', function() {\r",
							"  pm.expect(resp_data.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"\r",
							"pm.test(\"Dog's name is Luky\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"\r",
							"pm.test(\"Luky's age is 4\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.age).to.eql(4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Matt&age=6&salary=50",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Matt"
						},
						{
							"key": "age",
							"value": "6"
						},
						{
							"key": "salary",
							"value": "50"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "THE FORTH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Передать в окружение значение переменных name, age, salary\r",
							"\r",
							"pm.environment.set(\"name\", \"Alexey\");\r",
							"pm.environment.set(\"age\", 4);\r",
							"pm.environment.set(\"salary\", 500);\r",
							"\r",
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"\r",
							"let resp_data = pm.response.json()\r",
							"\r",
							"// Спарсить request\r",
							"\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Name in response equals name in request\", function () {\r",
							"    pm.expect(resp_data.name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Age in response equals age in request\", function () {\r",
							"    pm.expect(JSON.stringify(resp_data.age)).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(req_data.salary);\r",
							"\r",
							"// Вывести в консоль параметр salary из response\r",
							"\r",
							"console.log(resp_data.salary);\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"\r",
							"console.log(resp_data.salary[0]);\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"\r",
							"console.log(resp_data.salary[1], resp_data.salary);\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"\r",
							"console.log(resp_data.salary[2], resp_data.salary);\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary 0 from response = salary from request\", function () {\r",
							"    pm.expect(JSON.stringify(resp_data.salary[0])).to.eql(req_data.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary 1 from response = double salary from request\", function () {\r",
							"    pm.expect(Number(resp_data.salary[1])).to.eql(req_data.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary 2 from response = salary multipy on 3\", function () {\r",
							"    pm.expect(Number(resp_data.salary[2])).to.eql(req_data.salary*3);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							"for (let  i = 0; i < resp_data.salary.length; i++) {\r",
							"    console.log(resp_data.salary[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "THE FIFTH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметры name, age, salary из окружения в request\r",
							"\r",
							"pm.environment.set(\"name\", \"Alexey\");\r",
							"pm.environment.set(\"age\", 4);\r",
							"pm.environment.set(\"salary\", 500);\r",
							"\r",
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"\r",
							"let resp_data = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"\r",
							"let req_data = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Does start_qa_salary exist?\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Does qa_salary_after_12_months exist?\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Does qa_salary_after_3.5_years exist?\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Does qa_salary_after_6_months exist?\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Does qa_salary_after_1.5_year exist?\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//  Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Does person exist?\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Start_qa_salary in request equals start_qa_salary from response\", function () {\r",
							"    pm.expect(pm.response.json().start_qa_salary).to.eql(Number(req_data.salary));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months in request equals qa_salary_after_6_months from response\", function () {\r",
							"    pm.expect(pm.response.json().qa_salary_after_6_months).to.eql(Number(req_data.salary*2));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months in request equals qa_salary_after_12_months from response\", function () {\r",
							"    pm.expect(pm.response.json().qa_salary_after_12_months).to.eql(Number(req_data.salary*2.7));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year in request equals qa_salary_after_1.5_year from response\", function () {\r",
							"    pm.expect(pm.response.json()['qa_salary_after_1.5_year']).to.eql(Number(req_data.salary*3.3));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years in request equals qa_salary_after_3.5_years from response\", function () {\r",
							"    pm.expect(pm.response.json()['qa_salary_after_3.5_years']).to.eql(Number(req_data.salary*3.8));\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary from u_name is OK\", function () {\r",
							"    pm.expect(resp_data.person.u_name[1]).to.eql(Number(req_data.salary));\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Age from u_age is OK\", function () {\r",
							"    pm.expect(resp_data.person.u_age).to.eql(Number(req_data.age));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"U_salary_5_years is OK\", function () {\r",
							"    pm.expect(resp_data.person.u_salary_5_years).to.eql(Number(req_data.salary*4.2));\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"Object.keys(resp_data.person).forEach(key => {\r",
							"  console.log(key)\r",
							"  console.log(resp_data.person[key]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}